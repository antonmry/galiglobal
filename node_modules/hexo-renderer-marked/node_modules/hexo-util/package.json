{
  "name": "hexo-util",
  "version": "0.1.6",
  "description": "Utilities for Hexo.",
  "main": "lib/index",
  "scripts": {
    "test": "gulp test"
  },
  "directories": {
    "lib": "./lib"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "repository": {
    "type": "git",
    "url": "hexojs/hexo-util"
  },
  "homepage": "http://hexo.io/",
  "keywords": [
    "hexo",
    "util",
    "utilities"
  ],
  "author": {
    "name": "Tommy Chen",
    "email": "tommy351@gmail.com",
    "url": "http://zespia.tw"
  },
  "license": "MIT",
  "devDependencies": {
    "chai": "^1.9.1",
    "coveralls": "^2.11.2",
    "gulp": "^3.8.9",
    "gulp-bench": "^1.1.0",
    "gulp-istanbul": "^0.5.0",
    "gulp-jshint": "^1.8.6",
    "gulp-load-plugins": "^0.8.0",
    "gulp-mocha": "^2.0.0",
    "jshint-stylish": "^1.0.0",
    "mocha": "^2.0.1",
    "rimraf": "^2.2.8"
  },
  "dependencies": {
    "bluebird": "^2.6.2",
    "ent": "^2.2.0",
    "highlight.js": "^8.4.0"
  },
  "readme": "# hexo-util\n\n[![Build Status](https://travis-ci.org/hexojs/hexo-util.svg?branch=master)](https://travis-ci.org/hexojs/hexo-util)  [![NPM version](https://badge.fury.io/js/hexo-util.svg)](http://badge.fury.io/js/hexo-util) [![Coverage Status](https://img.shields.io/coveralls/hexojs/hexo-util.svg)](https://coveralls.io/r/hexojs/hexo-util?branch=master)\n\nUtilities for [Hexo].\n\n## Installation\n\n``` bash\n$ npm install hexo-util --save\n```\n\n## Usage\n\n``` js\nvar util = require('hexo-util');\n```\n\n### escapeRegex(str)\n\nEscapes special characters in a regular expression.\n\n### escapeDiacritic(str)\n\nEscapes diacritic characters in a string.\n\n### escapeHTML(str)\n\nEscapes HTML entities in a string.\n\n### highlight(str, [options])\n\nSyntax highlighting for a code block.\n\nOption | Description | Default\n--- | --- | ---\n`gutter` | Whether to show line numbers | true\n`wrap` | Whether to wrap the code block | true\n`first_line` | First line number | 1\n`lang` | Language (Auto detect if not defined) |\n`caption` | Caption |\n`tab`| Replace tabs |\n\n### htmlTag(tag, attrs, text)\n\nCreates a html tag.\n\n``` js\nhtmlTag('img', {src: 'example.png'})\n// <img src=\"example.png\">\n\nhtmlTag('a', {href: 'http://hexo.io/'}, 'Hexo')\n// <a href=\"http://hexo.io/\">Hexo</a>\n```\n\n### Pattern(rule)\n\nParses the string and tests if the string matches the rule. `rule` can be a string, a regular expression or a function.\n\n``` js\nvar pattern = new Pattern('posts/:id');\n\npattern.match('posts/89');\n// {0: 'posts/89', 1: '89', id: '89'}\n```\n\n``` js\nvar pattern = new Pattern('posts/*path');\n\npattern.match('posts/2013/hello-world');\n// {0: 'posts/2013/hello-world', 1: '2013/hello-world', path: '2013/hello-world'}\n```\n\n### Permalink(rule, [options])\n\nParses a permalink.\n\nOption | Description\n--- | ---\n`segments` | Customize the rule of a segment in the permalink\n\n``` js\nvar permalink = new Permalink(':year/:month/:day/:title', {\n  segments: {\n    year: /(\\d{4})/,\n    month: /(\\d{2})/,\n    day: /(\\d{2})/\n  }\n});\n\npermalink.parse('2014/01/31/test');\n// {year: '2014', month: '01', day: '31', title: 'test'}\n\npermalink.test('2014/01/31/test');\n// true\n\npermalink.stringify({year: '2014', month: '01', day: '31', title: 'test'})\n// 2014/01/31/test\n```\n\n### slugize(str, [options])\n\nTransforms a string into a clean URL-friendly string.\n\nOption | Description | Default\n--- | --- | ---\n`separator` | Separator | -\n`transform` | Transform the string into lower case (`1`) or upper case (`2`) |\n\n``` js\nslugize('Hello World') = 'Hello-World'\nslugize('Hellô Wòrld') = 'Hello-World'\nslugize('Hello World', {separator: '_'}) = 'Hello_World'\nslugize('Hello World', {transform: 1}) = 'hello-world'\nslugize('Hello World', {transform: 2}) = 'HELLO-WORLD'\n```\n\n### spawn(command, [args], [options])\n\nLaunches a new process with the given `command`. This method returns a promise.\n\nOption | Description | Default\n--- | --- | ---\n`cwd` | Current working directory of the child process |\n`env` | Environment key-value pairs |\n`stdio` | Child's stdio configuration |\n`detached` | The child will be a process group leader |\n`uid` | Sets the user identity of the process |\n`gid` | Sets the group identity of the process |\n`verbose` | Display messages on the console | false\n`encoding` | Sets the encoding of the output string | utf8\n\n``` js\nspawn('cat', 'test.txt').then(function(content){\n  console.log(content);\n});\n```\n\n### stripHTML(str)\n\nRemoves HTML tags in a string.\n\n### wordWrap(str, [options])\n\nWraps the string no longer than line width. This method breaks on the first whitespace character that does not exceed line width.\n\nOption | Description | Default\n--- | --- | ---\n`width` | Line width | 80\n\n``` js\nwordWrap('Once upon a time')\n// Once upon a time\n\nwordWrap('Once upon a time, in a kingdom called Far Far Away, a king fell ill, and finding a successor to the throne turned out to be more trouble than anyone could have imagined...')\n// Once upon a time, in a kingdom called Far Far Away, a king fell ill, and finding\\na successor to the throne turned out to be more trouble than anyone could have\\nimagined...\n\nwordWrap('Once upon a time', {width: 8})\n// Once\\nupon a\\ntime\n\nwordWrap('Once upon a time', {width: 1})\n// Once\\nupon\\na\\ntime\n```\n\n### truncate(str, [options])\n\nTruncates a given text after a given `length` if text is longer than `length`. The last characters will be replaced with the `omission` option for a total length not exceeding `length`.\n\nOption | Description | Default\n--- | --- | ---\n`length` | Max length of the string | 30\n`omission` | Omission text | ...\n`separator` | truncate text at a natural break |\n\n``` js\ntruncate('Once upon a time in a world far far away')\n// \"Once upon a time in a world...\"\n\ntruncate('Once upon a time in a world far far away', {length: 17})\n// \"Once upon a ti...\"\n\ntruncate('Once upon a time in a world far far away', {length: 17, separator: ' '})\n// \"Once upon a...\"\n\ntruncate('And they found that many people were sleeping better.', {length: 25, omission: '... (continued)'})\n// \"And they f... (continued)\"\n```\n\n## License\n\nMIT\n\n[Hexo]: http://hexo.io/",
  "readmeFilename": "README.md",
  "_id": "hexo-util@0.1.6",
  "_from": "hexo-util@^0.1.0"
}
